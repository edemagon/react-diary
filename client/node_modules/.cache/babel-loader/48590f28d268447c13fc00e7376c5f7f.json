{"ast":null,"code":"var _jsxFileName = \"/Users/i345275/Documents/FORMATIONS/REACT/diary-one/src/ComputeRecipe.js\";\nimport React from 'react';\nimport './index.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport AddIngredient from './AddIngredient.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ComputeRecipe extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeIng = this.handleChangeIng.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.addIng = this.addIng.bind(this);\n    this.selectChoice = this.selectChoice.bind(this);\n    this.findIng = this.findIng.bind(this);\n    this.state = {\n      new: '',\n      title: 'undef',\n      type: 'undef',\n      ingredients: [],\n      nutrientFacts: {}\n    };\n  } //Confirmrecipe: clean choices, calculate overall nutrtional facts\n\n\n  SumNutrients() {\n    let nutrientFacts;\n    const ingredients = this.state.ingredients.slice();\n    ingredients.forEach(ing => {\n      nutrientFacts['kcal'] += ing.value.nutrientFacts.kcal;\n    });\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const name = target.name;\n    this.setState({\n      [name]: target.value\n    });\n  }\n\n  handleChangeIng(event, index) {\n    const target = event.target;\n    const value = target.value;\n    let ingredients = this.state.ingredients.slice();\n    ingredients[index].userInput = value;\n    this.setState({\n      ingredients: ingredients\n    });\n  }\n\n  handleClick(event) {\n    alert('Une recette a été envoyé : ' + JSON.stringify(this.state));\n    event.preventDefault();\n  }\n\n  addIng() {\n    let ingredients = this.state.ingredients.slice();\n    ingredients.push({\n      userInput: '',\n      choices: []\n    });\n    this.setState({\n      ingredients: ingredients\n    });\n  }\n\n  findIng(event, ingNumber) {\n    let value = this.state.ingredients[ingNumber].userInput; // let ApiBase= \"https://api.nal.usda.gov/fdc/v1/foods/search?query=XXX&pageSize=&api_key=tgyxI8kaDGTFx9V50jKbPXTpMnzKSEJG3c6oAZsD\";\n\n    let apiBase = \"https://api.nal.usda.gov/fdc/v1/foods/search?api_key=DEMO_KEY&\";\n    let requestBody = {\n      \"query\": value,\n      \"generalSearchInput\": value,\n      \"includeDataTypes\": {\n        \"Foundation\": true\n      },\n      \"includeMarketCountries\": null,\n      \"referenceFoodsCheckBox\": true,\n      \"exactBrandOwner\": null,\n      \"requireAllWords\": true,\n      \"pageNumber\": 1,\n      \"sortCriteria\": {\n        \"sortColumn\": \"description\",\n        \"sortDirection\": \"asc\"\n      }\n    }; // get all entities - GET\n\n    fetch(apiBase, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    }).then(response => response.json()).then(response => {\n      let firstValue = response.foods[0];\n      let nutrientFacts = {};\n      firstValue.foodNutrients.forEach(nutrientFact => {\n        switch (nutrientFact.nutrientName) {\n          case 'Protein':\n            nutrientFacts['protein'] = nutrientFact.value;\n            break;\n\n          case 'Carbohydrate, by difference':\n            nutrientFacts['carbohydrate'] = nutrientFact.value;\n            break;\n\n          case 'Energy (Atwater General Factors)':\n            nutrientFacts['kcal'] = nutrientFact.value;\n            break;\n\n          case 'Total lipid (fat)':\n            nutrientFacts['lipid'] = nutrientFact.value;\n            break;\n\n          case 'Sugars, Total NLEA':\n            nutrientFacts['sugars'] = nutrientFact.value;\n            break;\n        }\n\n        if (!nutrientFacts['kcal'] && nutrientFact.unitName === 'KCAL') {\n          nutrientFacts['kcal'] = nutrientFact.value;\n        }\n      });\n      let choices = [{\n        fdcId: firstValue.fdcId,\n        foodCategory: firstValue.foodCategory,\n        description: firstValue.description,\n        nutrientFacts: nutrientFacts\n      }];\n      let ings = this.state.ingredients.slice();\n      ings[ingNumber].choices = choices;\n      this.setState({\n        ingredients: ings\n      });\n      alert('Un ingredient a été ajouté: ' + JSON.stringify(this.state.ingredients));\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  selectChoice(event, ingNumber, choiceNumber) {\n    let ings = this.state.ingredients.slice();\n    ings[ingNumber]['value'] = ings[ingNumber].choices[choiceNumber];\n    this.setState({\n      ingredients: ings\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"p-3 w-50\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.handleClick,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"compute.type\",\n          className: \"w-50\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Choose article Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            name: \"type\",\n            value: this.state.type,\n            onChange: this.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"choose\",\n              children: \"Choose\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"dessert\",\n              children: \"Dessert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"plat\",\n              children: \"Plat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"compute.title\",\n          className: \"mb-3 w-50\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Titre de la recette\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            name: \"title\",\n            placeholder: this.state.title,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), this.state.ingredients.map((ing, index) => {\n          return /*#__PURE__*/_jsxDEV(AddIngredient, {\n            ing: ing,\n            index: index,\n            handleChangeIng: this.handleChangeIng,\n            findIng: this.findIng,\n            selectChoice: this.selectChoice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: this.addIng,\n          className: \"m-3\",\n          children: \"Add ingredient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          type: \"submit\",\n          className: \"m-3\",\n          children: \"create recipe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"La recette de \", this.state.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          children: this.state.type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.ingredients.map(ing => {\n            return ing.value ? /*#__PURE__*/_jsxDEV(\"li\", {\n              children: ing.value.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 48\n            }, this) : /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \" choose ingredients\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 83\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ComputeRecipe;","map":{"version":3,"sources":["/Users/i345275/Documents/FORMATIONS/REACT/diary-one/src/ComputeRecipe.js"],"names":["React","Form","Button","Container","AddIngredient","ComputeRecipe","Component","constructor","props","handleChange","bind","handleChangeIng","handleClick","addIng","selectChoice","findIng","state","new","title","type","ingredients","nutrientFacts","SumNutrients","slice","forEach","ing","value","kcal","event","target","name","setState","index","userInput","alert","JSON","stringify","preventDefault","push","choices","ingNumber","apiBase","requestBody","fetch","method","headers","body","then","response","json","firstValue","foods","foodNutrients","nutrientFact","nutrientName","unitName","fdcId","foodCategory","description","ings","catch","err","console","log","choiceNumber","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport AddIngredient from './AddIngredient.js';\n\n\nclass ComputeRecipe extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleChangeIng = this.handleChangeIng.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.addIng = this.addIng.bind(this);\n        this.selectChoice = this.selectChoice.bind(this);\n        this.findIng = this.findIng.bind(this);\n        this.state = {\n            new: '',\n            title: 'undef',\n            type: 'undef',\n            ingredients: [],\n            nutrientFacts: {}\n        };\n    }\n    //Confirmrecipe: clean choices, calculate overall nutrtional facts\n    SumNutrients() {\n        let nutrientFacts;\n        const ingredients = this.state.ingredients.slice();\n        ingredients.forEach((ing) =>{\n            nutrientFacts['kcal'] += ing.value.nutrientFacts.kcal;\n        })\n    }\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        this.setState({\n            [name]: target.value\n        });\n    }\n    handleChangeIng(event, index) {\n        const target = event.target;\n        const value = target.value;\n        let ingredients = this.state.ingredients.slice();\n        ingredients[index].userInput = value;\n        this.setState({\n            ingredients: ingredients\n        });\n    }\n    handleClick(event) {\n        alert('Une recette a été envoyé : ' + JSON.stringify(this.state));\n        event.preventDefault();\n    }\n    addIng() {\n        let ingredients =this.state.ingredients.slice();\n        ingredients.push({\n            userInput: '',\n            choices: []\n        });\n        this.setState({\n            ingredients: ingredients\n        });\n    }\n    findIng(event, ingNumber) {\n        let value = this.state.ingredients[ingNumber].userInput;\n        // let ApiBase= \"https://api.nal.usda.gov/fdc/v1/foods/search?query=XXX&pageSize=&api_key=tgyxI8kaDGTFx9V50jKbPXTpMnzKSEJG3c6oAZsD\";\n        let apiBase= \"https://api.nal.usda.gov/fdc/v1/foods/search?api_key=DEMO_KEY&\";\n        let requestBody= {\n            \"query\": value,\n            \"generalSearchInput\": value,\n            \"includeDataTypes\" : {\n                \"Foundation\": true\n            },\n            \"includeMarketCountries\": null,\n            \"referenceFoodsCheckBox\": true,\n            \"exactBrandOwner\": null,\n            \"requireAllWords\": true,\n            \"pageNumber\": 1,\n            \"sortCriteria\":{\n                \"sortColumn\":\"description\",\n                \"sortDirection\":\"asc\"\n            }\n        };\n        // get all entities - GET\n        fetch(apiBase, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(requestBody)\n        })\n            .then(response => response.json())\n            .then(response => {\n                let firstValue= response.foods[0];\n                let nutrientFacts = {};\n                firstValue.foodNutrients.forEach((nutrientFact) => {\n                    switch (nutrientFact.nutrientName) {\n                        case 'Protein':\n                            nutrientFacts['protein']= nutrientFact.value;\n                            break;\n                        case 'Carbohydrate, by difference':\n                            nutrientFacts['carbohydrate']= nutrientFact.value;\n                            break;\n                        case 'Energy (Atwater General Factors)':\n                            nutrientFacts['kcal']= nutrientFact.value;\n                            break;\n                        case 'Total lipid (fat)':\n                            nutrientFacts['lipid']= nutrientFact.value;\n                            break;\n                        case 'Sugars, Total NLEA':\n                            nutrientFacts['sugars']= nutrientFact.value;\n                            break;\n                    }\n                    if (!nutrientFacts['kcal'] && nutrientFact.unitName === 'KCAL') {\n                        nutrientFacts['kcal']= nutrientFact.value;\n                    }\n                });\n                let choices = [{\n                    fdcId: firstValue.fdcId,\n                    foodCategory: firstValue.foodCategory,\n                    description: firstValue.description,\n                    nutrientFacts: nutrientFacts\n                }];\n                let ings = this.state.ingredients.slice();\n                ings[ingNumber].choices = choices;\n                this.setState({\n                    ingredients: ings\n                });\n                alert('Un ingredient a été ajouté: ' + JSON.stringify(this.state.ingredients));\n            })\n            .catch(err => { console.log(err);});\n    }\n    selectChoice(event, ingNumber, choiceNumber) {\n        let ings = this.state.ingredients.slice();\n        ings[ingNumber]['value'] = ings[ingNumber].choices[choiceNumber];\n        this.setState({\n            ingredients: ings\n        });\n    }\n    render() {\n        return (\n            <Container className=\"p-3 w-50\">\n                <Form onSubmit={this.handleClick}>\n                    <Form.Group controlId=\"compute.type\" className=\"w-50\">\n                        <Form.Label>Choose article Type</Form.Label>\n                        <Form.Control\n                            as=\"select\"\n                            name=\"type\"\n                            value={this.state.type}\n                            onChange={this.handleChange}\n                        >\n                            <option value=\"choose\">Choose</option>\n                            <option value=\"dessert\">Dessert</option>\n                            <option value=\"plat\">Plat</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId='compute.title' className=\"mb-3 w-50\">\n                        <Form.Label>Titre de la recette</Form.Label>\n                        <Form.Control type=\"text\" name=\"title\" placeholder={this.state.title} onChange={this.handleChange}/>\n                    </Form.Group>\n                {this.state.ingredients.map((ing, index) => {\n                    return (\n                        <AddIngredient ing={ing} index={index} handleChangeIng={this.handleChangeIng} findIng={this.findIng} selectChoice={this.selectChoice} />\n                    );\n                })}\n                    <Button variant=\"primary\" onClick={this.addIng} className=\"m-3\">\n                        Add ingredient\n                    </Button>\n                    <Button variant=\"danger\" type=\"submit\" className=\"m-3\">\n                        create recipe\n                    </Button>\n                </Form>\n\n                <div>\n                    <p>La recette de {this.state.title}</p>\n                    <i>{this.state.type}</i>\n                    <ul>\n                        {this.state.ingredients.map((ing) => {\n                            return ing.value ? <li>{ing.value.description}</li> : <li> choose ingredients</li>\n                        })}\n                    </ul>\n                </div>\n            </Container>\n        );\n    }\n}\nexport default ComputeRecipe;"]},"metadata":{},"sourceType":"module"}