[{"/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/index.js":"1","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/App.js":"2","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/reportWebVitals.js":"3","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/Article.js":"4","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/Creation.js":"5","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/ComputeRecipe.js":"6","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/Home.js":"7","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/ListArticles.js":"8","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/Header.js":"9","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/AddIngredient.js":"10"},{"size":558,"mtime":1630010039472,"results":"11","hashOfConfig":"12"},{"size":2393,"mtime":1631123671054,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1627917591072,"results":"14","hashOfConfig":"12"},{"size":663,"mtime":1629928020116,"results":"15","hashOfConfig":"12"},{"size":2917,"mtime":1629902877920,"results":"16","hashOfConfig":"12"},{"size":10620,"mtime":1631114532891,"results":"17","hashOfConfig":"12"},{"size":307,"mtime":1631114225236,"results":"18","hashOfConfig":"12"},{"size":590,"mtime":1629879971987,"results":"19","hashOfConfig":"12"},{"size":1901,"mtime":1631114591305,"results":"20","hashOfConfig":"12"},{"size":3901,"mtime":1631111490995,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1a1rll0",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/index.js",[],"/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/App.js",["47"],"import './App.scss';\n// import Recipe from './Recipe';\nimport Creation from './Creation';\nimport ListArticles from './ListArticles';\nimport Article from './Article';\nimport Home from './Home';\nimport Header from './Header';\nimport ComputeRecipe from './ComputeRecipe';\nimport React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.submit = this.submit.bind(this);\n        this.state = {\n            articles: []\n        };\n    }\n    submit(article) {\n        let articles = this.state.articles.slice();\n        article.ID = articles.length;\n        article.creationDate = new Date().toLocaleString();\n        articles.push(article);\n        this.setState({\n            articles: articles\n        });\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                {/*<header className=\"App-header\">*/}\n                    {/*<p>*/}\n                        {/*Life Diary.*/}\n                    {/*</p>*/}\n                {/*</header>*/}\n                <div>\n                    <Router>\n                        <Header/>\n                        {/*Routing*/}\n                        <Switch>\n                            <Route path=\"/computeRecipe\">\n                                <ComputeRecipe />\n                            </Route>\n                            <Route path=\"/articles/new\">\n                                <Creation submit={this.submit} />\n                            </Route>\n                            <Route path=\"/articles/:id\">\n                                <Article />\n                            </Route>\n                            <Route path=\"/articles\">\n                                <ListArticles articles={this.state.articles}/>\n                            </Route>\n                            <Route path=\"/\">\n                                <Home/>\n                            </Route>\n                        </Switch>\n                    </Router>\n                </div>\n                {/*<Menu></Menu>*/}\n                {/*<Recipe/>*/}\n                {/*<Creation submit={this.submit}/>*/}\n                {/*<ListArticles articles={this.state.articles}/>*/}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/reportWebVitals.js",[],"/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/Article.js",["48"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './Article.css';\nimport './index.css';\n\nclass ListArticles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n    render() {\n        return (\n            <div className=\"Article-display\">\n                <p>\n                    Type: {this.props.article.type} <br/>\n                    {this.props.article.title} <br/>\n                    creation date: {this.props.article.creationDate} <br/>\n                    {this.props.article.content}\n                </p>\n            </div>\n        );\n    }\n}\nexport default ListArticles;","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/Creation.js",[],"/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/ComputeRecipe.js",["49"],"import React from 'react';\nimport './index.css';\nimport Form from 'react-bootstrap/Form';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport AddIngredient from './AddIngredient.js';\n\n\nclass ComputeRecipe extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleChangeIng = this.handleChangeIng.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.addIng = this.addIng.bind(this);\n        this.removeIng = this.removeIng.bind(this);\n        this.selectChoice = this.selectChoice.bind(this);\n        this.SumNutrients = this.SumNutrients.bind(this);\n        this.findIng = this.findIng.bind(this);\n        this.state = {\n            new: '',\n            title: 'Your recipe title',\n            type: 'recipe type',\n            ingredients: [],\n            nutrientFacts: {}\n        };\n    }\n    //Confirmrecipe: clean choices, calculate overall nutrtional facts\n    SumNutrients() {\n        let nutrientFacts = {\n            kcal: 0,\n            carbohydrate: 0,\n            sugars: 0,\n            lipid: 0,\n            protein: 0\n        };\n        const ingredients = this.state.ingredients.slice();\n        ingredients.forEach((ing) =>{\n            nutrientFacts['kcal'] += ing.value.nutrientFacts.kcal || 0;\n            nutrientFacts['carbohydrate'] += ing.value.nutrientFacts.carbohydrate || 0;\n            nutrientFacts['lipid'] += ing.value.nutrientFacts.lipid || 0;\n            nutrientFacts['protein'] += ing.value.nutrientFacts.protein || 0;\n            nutrientFacts['sugars'] += ing.value.nutrientFacts.sugars || 0;\n        });\n        this.setState({\n            nutrientFacts: nutrientFacts\n        });\n    }\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        this.setState({\n            [name]: target.value\n        });\n    }\n    handleChangeIng(event, index) {\n        const target = event.target;\n        const name = target.name;\n        const value = target.value;\n        let ingredients = this.state.ingredients.slice();\n        ingredients[index][name] = value;\n        this.setState({\n            ingredients: ingredients\n        });\n    }\n    handleClick(event) {\n        alert('Une recette a été envoyé : ' + JSON.stringify(this.state));\n        event.preventDefault();\n    }\n    addIng() {\n        let ingredients =this.state.ingredients.slice();\n        ingredients.push({\n            userInputName: 'Ingredient name',\n            userInputQuantity: 'Quantity in grams',\n            choices: []\n        });\n        this.setState({\n            ingredients: ingredients\n        });\n    }\n    removeIng(event, ingNumber) {\n        let ingredients = this.state.ingredients.slice();\n        ingredients.splice(ingNumber, 1);\n        this.setState({\n            ingredients: ingredients\n        });\n    }\n    findIng(event, ingNumber) {\n        let value = this.state.ingredients[ingNumber].userInputName;\n        // let ApiBase= \"https://api.nal.usda.gov/fdc/v1/foods/search?query=XXX&pageSize=&api_key=tgyxI8kaDGTFx9V50jKbPXTpMnzKSEJG3c6oAZsD\";\n        let apiBase= \"https://api.nal.usda.gov/fdc/v1/foods/search?api_key=DEMO_KEY&\";\n        let requestBody= {\n            \"query\": value,\n            \"generalSearchInput\": value,\n            \"includeDataTypes\" : {\n                \"SR Legacy\": true\n            },\n            \"includeMarketCountries\": null,\n            \"referenceFoodsCheckBox\": true,\n            \"exactBrandOwner\": null,\n            \"requireAllWords\": true,\n            \"pageNumber\": 1,\n            \"sortCriteria\":{\n                \"sortColumn\":\"description\",\n                \"sortDirection\":\"asc\"\n            }\n        };\n        // get all entities - GET\n        fetch(apiBase, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(requestBody)\n        })\n            .then(response => response.json())\n            .then(response => {\n                let responses= response.foods.slice(0,10);\n                let choices = [];\n                responses.forEach((response, index) => {\n                    choices[index] = {\n                        fdcId: response.fdcId,\n                        foodCategory: response.foodCategory,\n                        description: response.description,\n                        nutrientFacts: {\n                            protein: 0,\n                            carbohydrate: 0,\n                            lipid:0,\n                            sugar: 0,\n                            kcal:0\n                        }\n                    };\n                    response.foodNutrients.forEach((nutrientFact) => {\n                        switch (nutrientFact.nutrientName) {\n                            case 'Protein':\n                                choices[index].nutrientFacts.protein = nutrientFact.value;\n                                break;\n                            case 'Carbohydrate, by difference':\n                                choices[index].nutrientFacts.carbohydrate = nutrientFact.value;\n                                break;\n                            case 'Total lipid (fat)':\n                                choices[index].nutrientFacts.lipid = nutrientFact.value;\n                                break;\n                            case 'Sugars, Total NLEA':\n                                choices[index].nutrientFacts.sugar = nutrientFact.value;\n                                break;\n                        }\n                        if (nutrientFact.unitName === 'KCAL') {\n                            choices[index].nutrientFacts.kcal= nutrientFact.value;\n                        }\n                    });\n                });\n                let ings = this.state.ingredients.slice();\n                ings[ingNumber].choices = choices;\n                this.setState({\n                    ingredients: ings\n                });\n            })\n            .catch(err => { console.log(err);});\n    }\n    selectChoice(event, ingNumber, choiceNumber) {\n        const computeQuantityNutrients = function(ingNutrientFacts, ingQuantity) {\n            let nutrientFacts = {};\n            for (const [key, value] of Object.entries(ingNutrientFacts)) {\n                nutrientFacts[key] = value * (ingQuantity/100);\n            }\n            return nutrientFacts;\n        };\n        let ings = this.state.ingredients.slice();\n        let choice = ings[ingNumber].choices[choiceNumber];\n        ings[ingNumber]['value'] = choice;\n        ings[ingNumber]['value']['nutrientFacts'] = computeQuantityNutrients(choice.nutrientFacts, ings[ingNumber].userInputQuantity);\n        // TODO cleanup choices\n        this.setState({\n            ingredients: ings\n        });\n        this.SumNutrients();\n    }\n    render() {\n        const showNutrientFacts = () => {\n            if (this.state.nutrientFacts) {\n                return (\n                    <Table bordered hover>\n                        <thead>\n                        <tr>\n                            <th>kcal</th>\n                            <th>carbohydrate</th>\n                            <th>sugars</th>\n                            <th>lipid</th>\n                            <th>protein</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td>{this.state.nutrientFacts.kcal}</td>\n                            <td>{this.state.nutrientFacts.carbohydrate}</td>\n                            <td>{this.state.nutrientFacts.sugars}</td>\n                            <td>{this.state.nutrientFacts.lipid}</td>\n                            <td>{this.state.nutrientFacts.protein}</td>\n                        </tr>\n                        </tbody>\n                    </Table>\n                );\n            }\n        };\n        return (\n            <Container fluid className=\"article-recipe p-5 w-75\">\n                <Form onSubmit={this.handleClick}>\n                    <Form.Group controlId=\"compute.type\" className=\"w-50\">\n                        <Form.Label>Choose article Type</Form.Label>\n                        <Form.Control\n                            as=\"select\"\n                            name=\"type\"\n                            value={this.state.type}\n                            onChange={this.handleChange}\n                        >\n                            <option value=\"choose\">Choose</option>\n                            <option value=\"dessert\">Dessert</option>\n                            <option value=\"plat\">Plat</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId='compute.title' className=\"mb-3 w-50\">\n                        <Form.Label>Titre de la recette</Form.Label>\n                        <Form.Control type=\"text\" name=\"title\" placeholder={this.state.title} onChange={this.handleChange}/>\n                    </Form.Group>\n                {this.state.ingredients.map((ing, index) => {\n                    return (\n                        <AddIngredient\n                            ing={ing}\n                            index={index}\n                            handleChangeIng={this.handleChangeIng}\n                            findIng={this.findIng}\n                            selectChoice={this.selectChoice}\n                            removeIng={this.removeIng}\n                        />\n                    );\n                })}\n                    <Button variant=\"info\" onClick={this.addIng} className=\"m-3\">\n                        Add ingredient\n                    </Button>\n                    <Button variant=\"success\" type=\"submit\" className=\"m-3\">\n                        create recipe\n                    </Button>\n                </Form>\n\n                <div>\n                    <p>La recette de {this.state.title}</p>\n                    <i>{this.state.type}</i>\n                    <ul>\n                        {this.state.ingredients.map((ing, index) => {\n                            return ing.value ? <li key={'ing.' + index}> {ing.userInputQuantity} grams {ing.value.description}</li> : <li key={'ing.' + index}> choose ingredients</li>\n                        })}\n                    </ul>\n                </div>\n                {showNutrientFacts()}\n            </Container>\n        );\n    }\n}\nexport default ComputeRecipe;","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/Home.js",[],"/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/ListArticles.js",["50"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Article from './Article';\n\n\nclass ListArticles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n    render() {\n        return (\n            <ul>\n                {this.props.articles.map((value, index) => {\n                    return <li> <Article article={value}/> </li>\n                    // return <li key={value.ID}> {JSON.stringify(value)} </li>\n                })}\n            </ul>\n        );\n    }\n}\nexport default ListArticles;","/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/Header.js",[],"/Users/i345275/Documents/FORMATIONS/REACT/diary-one/client/src/AddIngredient.js",["51"],"import React from 'react';\nimport './index.css';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\n\n\nclass AddIngredient extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.state = {\n            show: false,\n            userInput: '',\n            choices: []\n        };\n    }\n    handleShow() {\n        this.setState({show: true});\n    }\n    handleClose() {\n        this.setState({show: false});\n    }\n    // mise à jour userInput\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        this.setState({\n            [name]: target.value\n        });\n    }\n    render() {\n        let showSelection;\n        if (this.props.ing.value) {\n            showSelection = <Card className=\"m-2\" style={{ width: '18rem' }}>\n                <Card.Body>\n                    <Card.Title>{this.props.ing.value.description}</Card.Title>\n                    <Card.Subtitle className=\"mb-2 text-muted\">{this.props.ing.value.category}</Card.Subtitle>\n                    <Card.Text>\n                        {this.props.ing.userInputQuantity} grams: {this.props.ing.value.nutrientFacts.kcal} Kcal, {this.props.ing.value.nutrientFacts.carbohydrate} G, {this.props.ing.value.nutrientFacts.protein} P, {this.props.ing.value.nutrientFacts.lipid} L\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        }\n        else {\n            showSelection = <p><Form.Group controlId={'compute.' + this.props.index} className=\"mb-3 w-50\">\n                <Form.Label>Ingredient n° {this.props.index + 1}</Form.Label>\n                <Form.Control type=\"text\" name=\"userInputName\" placeholder={this.props.ing.userInputName} onChange={e => this.props.handleChangeIng(e, this.props.index)}/>\n                <Form.Control type=\"text\" name=\"userInputQuantity\" placeholder={this.props.ing.userInputQuantity} onChange={e => this.props.handleChangeIng(e, this.props.index)}/>\n            </Form.Group>\n                <Button variant=\"primary\" onClick={e => {this.state.show = true; this.props.findIng(e, this.props.index)}}>\n                    Show ingredients\n                </Button></p>\n        }\n        return (\n            <Container className=\"pl-5\">\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Select ingredient from list</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <ul>\n                            {!this.props.ing.value && this.props.ing.choices && this.props.ing.choices.map((choice, index) => {\n                                return (\n                                    <li key={'choices.' + index}>\n                                        {choice.description}\n                                        <button variant=\"info\" onClick={e => {this.props.selectChoice(e, this.props.index, index); this.handleClose()}}>\n                                            Select\n                                        </button>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    </Modal.Body>\n                </Modal>\n                {showSelection}\n                        <Button variant=\"warning\" onClick={e => this.props.removeIng(e, this.props.index)}>\n                            Remove\n                        </Button>\n            </Container>\n        );\n    }\n}\nexport default AddIngredient;",{"ruleId":"52","severity":1,"message":"53","line":15,"column":8,"nodeType":"54","messageId":"55","endLine":15,"endColumn":19},{"ruleId":"52","severity":1,"message":"56","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":16},{"ruleId":"57","severity":1,"message":"58","line":136,"column":25,"nodeType":"59","messageId":"60","endLine":149,"endColumn":26},{"ruleId":"52","severity":1,"message":"56","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":16},{"ruleId":"61","severity":1,"message":"62","line":55,"column":58,"nodeType":"63","endLine":55,"endColumn":68},"no-unused-vars","'NavDropdown' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression"]